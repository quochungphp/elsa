{
  "name": "elsa-test",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "env:local": "./scripts/replace_json_file.sh './configs/config.local.json' './configs/config.json'",
    "env:dev": "./scripts/replace_json_file.sh './configs/config.dev.json' './configs/config.json'",
    "env:stg": "./scripts/replace_json_file.sh './configs/config.staging.json' './configs/config.json'",
    "env:prod": "./scripts/replace_json_file.sh './configs/config.prod.json' './configs/config.json'",
    "env:preprod": "./scripts/replace_json_file.sh './configs/config.preprod.json' './configs/config.json'",
    "env:test": "./scripts/replace_json_file.sh './configs/config.test.json' './configs/config.json'",
    "build": "nest build",
    "docker:start:db": "docker-compose -f docker-compose.db.yml up",
    "docker:start:redis": "docker-compose -f docker-compose.redis.yml up",
    "docker:build": "docker build . -t elsa/service",
    "docker:run": "docker run --name elsa-test --network elsa-test_default -e POSTGRES_USER=$POSTGRES_USER -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD -p 9000:9000 -p 9001:9001 elsa/service",
    "docker:start:local": "npm run env:local & docker-compose -f docker-compose.local.yml up",
    "docker:start:dev": "npm run env:dev & npm run docker:build & npm run docker:run",
    "docker:start:stg": "npm run env:stg & npm run docker:build & npm run docker:run",
    "docker:start:prod": "npm run env:prod & npm run docker:build & npm run docker:run",
    "docker:clean": "docker rm elsa-test & docker image rm elsa/service",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "typeorm": "ts-node ./node_modules/typeorm/cli",
    "migration:run": "npm run typeorm migration:run -- -d ./src/utils/typeorm-config.ts",
    "migration:generate": "npm run typeorm -- -d ./src/utils/typeorm-config.ts migration:generate ./src/database/migrations/$npm_config_name",
    "migration:generate:local": "IS_LOCAL_MACHINE=true npm run typeorm -- -d ./src/utils/typeorm-config.ts migration:generate ./src/database/migrations/$npm_config_name",
    "migration:create": "npm run typeorm -- migration:create ./src/database/migrations/$npm_config_name",
    "migration:revert": "npm run typeorm -- -d ./src/utils/typeorm-config.ts migration:revert",
    "migration:run:local": "IS_LOCAL_MACHINE=true npm run typeorm migration:run -- -d ./src/utils/typeorm-config.ts",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\"",
    "lint:fix": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "lint:format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "IS_LOCAL_MACHINE=true nest start",
    "start:local": "migration:run:local & npm run env:local & npm run build & IS_LOCAL_MACHINE=true nest start --debug --watch",
    "start:dev": "npm run env:dev & npm run build & nest start",
    "start:stg": "npm run env:stg & npm run build & nest start",
    "start:preprod": "npm run env:preprod & npm run build & nest start",
    "start:prod": "npm run env:prod & npm run build & nest start",
    "start:test": "npm run env:test & npm run build & nest start",
    "start:debug": "nest start --debug --watch",
    "test:setup": "npm run env:test",
    "test": "npm run test:setup & IS_LOCAL_MACHINE=true && jest",
    "test:local": "IS_LOCAL_MACHINE=true npm run test",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json",
    "test:integration:ci": "npm run test:setup && jest --runInBand --bail --reporters default jest-stare --forceExit",
    "test:integration": "IS_INTEGRATION_TEST=true IS_LOCAL_MACHINE=true jest --runInBand --bail --reporters default jest-stare --forceExit",
    "prepare": "husky install"
  },
  "dependencies": {
    "@aws-sdk/client-ssm": "^3.441.0",
    "@nestjs/axios": "^3.0.1",
    "@nestjs/common": "^10.2.7",
    "@nestjs/config": "^3.1.1",
    "@nestjs/core": "^10.2.7",
    "@nestjs/mongoose": "^10.1.0",
    "@nestjs/platform-express": "^10.2.7",
    "@nestjs/platform-socket.io": "^10.2.8",
    "@nestjs/schedule": "^4.0.0",
    "@nestjs/swagger": "^7.1.14",
    "@nestjs/typeorm": "^10.0.0",
    "@nestjs/websockets": "^10.2.8",
    "@socket.io/redis-adapter": "^8.2.1",
    "@starkware-industries/starkex-js": "^0.1.0",
    "@starkware-industries/starkware-crypto-utils": "^0.0.2",
    "@types/ioredis": "^5.0.0",
    "@types/pg": "^8.10.7",
    "@types/pg-format": "^1.0.4",
    "bn.js": "^5.2.1",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.0",
    "cli-table": "^0.3.11",
    "enc-utils": "^3.0.0",
    "express-http-context": "^1.2.4",
    "helmet": "^7.0.0",
    "ioredis": "^5.3.1",
    "jest-stare": "^2.5.1",
    "md5": "^2.3.0",
    "mongoose": "^8.9.2",
    "nestjs-typeorm-paginate": "^4.0.4",
    "newrelic": "^11.5.0",
    "on-headers": "^1.0.2",
    "pg": "^8.11.3",
    "pg-format": "^1.0.4",
    "redis": "^4.6.10",
    "reflect-metadata": "^0.1.13",
    "rxjs": "^7.2.0",
    "socket.io": "^4.7.2",
    "typeorm": "^0.3.17",
    "webpack": "^5.89.0"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.2.1",
    "@nestjs/schematics": "^10.0.3",
    "@nestjs/testing": "^10.2.7",
    "@types/bn.js": "^5.1.5",
    "@types/cli-table": "^0.3.3",
    "@types/express": "^4.17.13",
    "@types/jest": "29.2.4",
    "@types/node": "^18.11.18",
    "@types/supertest": "^2.0.11",
    "@types/uuid": "^9.0.6",
    "@types/ws": "^8.5.8",
    "@typescript-eslint/eslint-plugin": "^5.0.0",
    "@typescript-eslint/parser": "^5.0.0",
    "eslint": "^8.0.1",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-prettier": "^4.0.0",
    "husky": "^8.0.3",
    "jest": "29.3.1",
    "prettier": "^2.3.2",
    "socket.io-client": "^4.7.2",
    "source-map-support": "^0.5.20",
    "supertest": "^6.1.3",
    "ts-jest": "29.0.3",
    "ts-loader": "^9.2.3",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "4.1.1",
    "typescript": "^4.9.5"
  },
  "jest": {
    "testTimeout": 180000,
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "setupFiles": [
      "./utils/setup-jest-3rd-party-mock.ts"
    ],
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  }
}
